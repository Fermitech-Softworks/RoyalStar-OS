finestra = {
  x=1,
  y=1,
  larghezza=1,
  altezza=1,
  colore=colors.red,
  coloreTesto=colors.white,
  nome="",
  elementi={},
  primoPiano=true,
  display = term.native(),
  hidden=false,
  elementi_index={},
  offset_x={},
  offset_y={},
  id = 1
}

finestre = {}
debugInterface = peripheral.wrap("top")

function finestra.__init__(baseClass,x,y,larghezza,altezza,colore,coloreTesto, nome)
  self = {x=x, y=y, larghezza=larghezza, altezza=altezza, colore=colore, coloreTesto=coloreTesto, display=term.native(), primoPiano=true, nome=nome, id=#finestre}
  setmetatable(self, {__index=finestra})
  table.insert(finestre, self)
  return self
end

setmetatable(finestra, {__call=finestra.__init__})

function finestra:set(arg, value)
  if arg == "x" then self.x = value end
  if arg == "y" then self.y = value end
  if arg == "l" then self.larghezza = value end
  if arg == "a" then self.altezza = value end
  if arg == "c" then self.colore = value end
  if arg == "ct" then self.coloreTesto = value end
  if arg == "pp" then self.primoPiano = value end
end

function finestra:draw()
  local coloreAtt = self.display.getBackgroundColor()
  local coloreTAtt = self.display.getTextColor()
  local old = term.redirect(self.display)
  term.setBackgroundColor(self.colore)
  term.setTextColor(colors.white)
  paintutils.drawFilledBox(self.x, self.y, self.x+self.larghezza-1, self.y+self.altezza-1,self.colore)
  paintutils.drawLine(self.x, self.y, self.x+self.larghezza-1, self.y, colors.gray)
  term.setCursorPos(self.x, self.y)
  term.write(self.nome)
  term.setTextColor(coloreTAtt)
  term.setBackgroundColor(coloreAtt)
  term.redirect(old)
  for i=1, #self.elementi do
    o = self.elementi[i]
    valore = i+1
    o:draw()
  end
end

function finestra.repr()
  return self.x, self.y, self.testo, self.elementi
end

function finestra:remove()
  for i=1, #self.elementi do
    table.remove( self.elementi, i)
    table.remove( self.offset_x, i)
    table.remove( self.offset_y, i)
  end
  table.remove( finestre, self.id)
  self = nil
end

function finestra.tableWrite()
  print(#finestre)
  print(#self.elementi)
end

function finestra:append(oggetto, name)
  table.insert(self.offset_x, oggetto.x)
  table.insert(self.offset_y, oggetto.x)
  oggetto.x = self.x+oggetto.x
  oggetto.y = self.y+oggetto.y+1
  table.insert(self.elementi, oggetto)
  self.elementi_index[name]=#self.elementi
end

function agisci(evento)
  flag = true
  event = evento[1]
  button = evento[2]
  x = evento[3]
  y = evento [4]
  if event == "mouse_drag" and button==2 then
    debugInterface.write("Drag!")
    for i=1, #finestre do
      f = finestre[i]
      if x>=f.x and x<=f.x+f.larghezza-1 and y == f.y and f.primoPiano then
        term.clear()
        f.x=xPos
        f.y=yPos
        for a=1, #f.elementi do
          f.elementi[a]:set("x", f.x+f.offset_x[a]) -- il problema sorge dall'assenza di un dato di offset universale. questo si puÃ² risolvere con liste parallele.
          f.elementi[a]:set("y", f.y+f.offset_y[a]+1)
          f.elementi[a]:draw()
        end
        f:draw()
        flag = false
      end
    end
  elseif event == "mouse_click" then
    debugInterface.clear()
    debugInterface.setCursorPos(1,1)
    debugInterface.write("Puntatore(")
    debugInterface.write(x)
    debugInterface.write(y)
    for i=1, #finestre do
      f = finestre[i]
      valore = i+1
      debugInterface.setCursorPos(1,valore)
      debugInterface.write(") Dimensioni[")
      debugInterface.write(f.x)
      debugInterface.write(f.x+f.larghezza)
      debugInterface.write(f.y)
      debugInterface.write(f.altezza+f.y)
      debugInterface.write("], ")
      if x>=f.x and x<=f.x+f.larghezza-1 and y >= f.y+1 and y <= f.y+f.altezza-1 and f.primoPiano then
        debugInterface.clear()
        debugInterface.setCursorPos(1,1)
        debugInterface.write(f.testo)
        flag = false
        pulsanti.agisci(evento)
        caselle.agisci(evento)
      elseif x>=f.x and x<=f.x+f.larghezza-1 and y >= f.y and y <= f.y+f.altezza-1 then
        debugInterface.clear()
        debugInterface.setCursorPos(1,1)
        debugInterface.write(f.testo)
        flag = false
        for a=1, #finestre do
          f = finestre[a]
          f.primoPiano = false
          for b=1, #f.elementi do
            f.elementi[b].primoPiano = false
          end
        f.primoPiano = true
        end
      end
    end
  elseif event == "key" or event == "char" then
    flag = false
    caselle.agisci(evento)
  end
  if flag then
    os.queueEvent(event, button, x, y)
  end
end
