textbox = {
  x=1,
  y=1,
  larghezza=1,
  colore=colors.red,
  coloreTesto=colors.white,
  testo="",
  contenuto="",
  primoPiano=false,
  display = term.native(),
  hidden=false,
  active=false
}

textboxes = {}
debugInterface = peripheral.wrap("top")


function textbox.__init__(baseClass,x,y,larghezza,colore,coloreTesto)
  self = {x=x, y=y, larghezza=larghezza, colore=colore, coloreTesto=coloreTesto, display=term.native(), primoPiano=false}
  setmetatable(self, {__index=textbox})
  table.insert(textboxes, self)
  return self
end

setmetatable(textbox, {__call=textbox.__init__})

function textbox:set(arg, value)
  if arg == "x" then self.x = value end
  if arg == "y" then self.y = value end
  if arg == "l" then self.larghezza = value end
  if arg == "c" then self.colore = value end
  if arg == "ct" then self.coloreTesto = value end
  if arg == "t" then self.testo = value end
  if arg == "pp" then self.primoPiano = value end
  if arg == "tc" then self.contenuto = value end
  if arg == "h" then self.hidden = value end
  if arg == "a" then self.active = value end
end

function textbox:draw()
  debugInterface.clear()
  debugInterface.setCursorPos(1,1)
  debugInterface.write(self.x)
  debugInterface.write(self.y)
  local coloreAtt = self.display.getBackgroundColor()
  local coloreTAtt = self.display.getTextColor()
  local old = term.redirect(self.display)
  debugInterface.setCursorPos(1,2)
  term.setBackgroundColor(self.colore)
  term.setTextColor(self.coloreTesto)
  debugInterface.setCursorPos(1,2)
  debugInterface.write(self.larghezza)
  paintutils.drawLine(self.x, self.y, self.x+self.larghezza-1, self.y, self.colore)
  debugInterface.setCursorPos(1,2)
  term.setCursorPos(self.x, self.y)
  term.write(self.testo)
  term.setTextColor(coloreTAtt)
  term.setBackgroundColor(coloreAtt)
  term.redirect(old)
end

function textbox:valore()
  return self.contenuto()
end

function textbox.repr()
  return self.x, self.y, self.testo, self.contenuto, self.primoPiano
end

function tableWrite()
  print(#textboxes)
end

function agisci(event)
  flag = true
  if event[1] == "mouse_click" then
    debugInterface.clear()
    debugInterface.setCursorPos(1,1)
    debugInterface.write("Puntatore(")
    debugInterface.write(event[3])
    debugInterface.write(event[4])
    for i=1, #textboxes do
      t = textboxes[i]
      valore = i+1
      debugInterface.setCursorPos(1,valore)
      debugInterface.write("Textbox ")
      debugInterface.write(") Dimensioni[")
      debugInterface.write(t.x)
      debugInterface.write(t.x+t.larghezza)
      debugInterface.write(t.y)
      debugInterface.write("], ")
      if event[3]>=t.x and event[3]<=t.x+t.larghezza and event[4] == t.y then
        debugInterface.clear()
        debugInterface.setCursorPos(1,1)
        debugInterface.write("Successo")
        for k=1, #textboxes do
          a = textboxes[k]
          a:set("a",false)
        end
        t:set("a", true)
        flag = false
      end
    end
    if flag then
      os.queueEvent(event[1], event[2], event[3], event[4])
    end
  end
  if event[1] == 'key' and event[2]==14 then
    for i=1, #textboxes do
      t = textboxes[i]
      if t.active then
          t.contenuto=string.sub(t.contenuto,1 , #t.contenuto-1)
          if t.hidden then
                oggetto = ""
                for x=1, #t.contenuto do
                  if #oggetto < t.larghezza then
                    oggetto=oggetto.."*"
                  end
                end
                t.testo=oggetto
          else
            if #t.contenuto < t.larghezza then
              t.testo=t.contenuto
            else
              t.testo=string.sub(t.contenuto, #t.contenuto-t.larghezza+2)
            end
          end
          t:draw()
      end
    end
  end
  if event[1] == "char" then
    for i=1, #textboxes do
      t = textboxes[i]
      if t.active then
          t.contenuto=t.contenuto..event[2]
          debugInterface.clear()
          debugInterface.setCursorPos(1,1)
          debugInterface.write(#t.contenuto-t.larghezza)
          if t.hidden then
            oggetto=""
            for x=1, #t.contenuto do
              if #oggetto < t.larghezza then
                oggetto=oggetto.."*"
              end
            end
            t.testo=oggetto
          else
            if #t.contenuto < t.larghezza then
              t.testo=t.contenuto
            else
              t.testo=string.sub(t.contenuto, #t.contenuto-t.larghezza+2)
            end
          end
          t:draw()
      end
    end
  end
end
